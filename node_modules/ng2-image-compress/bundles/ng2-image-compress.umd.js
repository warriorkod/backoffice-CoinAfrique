(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ng2-image-compress', ['exports', 'rxjs', '@angular/core'], factory) :
    (factory((global['ng2-image-compress'] = {}),global.rxjs,global.ng.core));
}(this, (function (exports,rxjs,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ResizeOptions = /** @class */ (function () {
        function ResizeOptions() {
            this.Resize_Max_Height = 800;
            this.Resize_Max_Width = 1000;
            this.Resize_Quality = 70;
            this.Resize_Type = 'image/jpg';
        }
        return ResizeOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SourceImage = /** @class */ (function () {
        function SourceImage() {
        }
        return SourceImage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ImageUtilityService = /** @class */ (function () {
        function ImageUtilityService() {
        }
        /**
         * @param {?} url
         * @param {?} callback
         * @return {?}
         */
        ImageUtilityService.createImage = /**
         * @param {?} url
         * @param {?} callback
         * @return {?}
         */
            function (url, callback) {
                /** @type {?} */
                var image = new Image();
                image.onload = function () {
                    callback(image);
                };
                image.src = url;
            };
        /**
         * @param {?} file
         * @return {?}
         */
        ImageUtilityService.fileToDataURL = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                return new Promise(function (resolve) {
                    /** @type {?} */
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        resolve(e.target.result);
                    };
                    reader.readAsDataURL(file);
                });
            };
        /**
         * @param {?} fileList
         * @return {?}
         */
        ImageUtilityService.filesToSourceImages = /**
         * @param {?} fileList
         * @return {?}
         */
            function (fileList) {
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var total = fileList.length;
                    Array.from(fileList).forEach(function (fileItem) {
                        /** @type {?} */
                        var imageResult = new SourceImage();
                        console.log(fileItem.name);
                        imageResult.fileName = fileItem.name;
                        imageResult.type = fileItem.type;
                        imageResult.imageObjectUrl = URL.createObjectURL(fileItem);
                        ImageUtilityService.fileToDataURL(fileItem).then(function (result) {
                            imageResult.imageDataUrl = result;
                            observer.next(imageResult);
                            if (--total === 0)
                                observer.complete();
                        });
                    });
                });
            };
        /**
         * @param {?} fileList
         * @return {?}
         */
        ImageUtilityService.filesArrayToSourceImages = /**
         * @param {?} fileList
         * @return {?}
         */
            function (fileList) {
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var total = fileList.length;
                    fileList.forEach(function (fileItem) {
                        /** @type {?} */
                        var imageResult = new SourceImage();
                        console.log(fileItem.name);
                        // imageResult.fileName = fileItem.name;
                        imageResult.imageObjectUrl = URL.createObjectURL(fileItem);
                        ImageUtilityService.fileToDataURL(fileItem).then(function (result) {
                            imageResult.imageDataUrl = result;
                            observer.next(imageResult);
                            if (--total === 0)
                                observer.complete();
                        });
                    });
                });
            };
        return ImageUtilityService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ImageCompressService = /** @class */ (function () {
        function ImageCompressService() {
        }
        /**
         * @private
         * @param {?} sourceImgObj
         * @param {?} options
         * @return {?}
         */
        ImageCompressService.jicCompress = /**
         * @private
         * @param {?} sourceImgObj
         * @param {?} options
         * @return {?}
         */
            function (sourceImgObj, options) {
                /** @type {?} */
                var outputFormat = options.Resize_Type;
                /** @type {?} */
                var quality = options.Resize_Quality || 50;
                /** @type {?} */
                var mimeType = 'image/jpeg';
                if (outputFormat !== undefined && outputFormat === 'png') {
                    mimeType = 'image/png';
                }
                /** @type {?} */
                var maxHeight = options.Resize_Max_Height || 300;
                /** @type {?} */
                var maxWidth = options.Resize_Max_Width || 250;
                console.log('MAX Width n Height');
                console.log(options.Resize_Max_Height);
                console.log(options.Resize_Max_Width);
                console.log('Quality');
                console.log(quality);
                /** @type {?} */
                var height = sourceImgObj.height;
                /** @type {?} */
                var width = sourceImgObj.width;
                // calculate the width and height, constraining the proportions
                if (width > height) {
                    if (width > maxWidth) {
                        height = Math.round(height *= maxWidth / width);
                        width = maxWidth;
                    }
                }
                else {
                    if (height > maxHeight) {
                        width = Math.round(width *= maxHeight / height);
                        height = maxHeight;
                    }
                }
                console.log('CVS Width n Height');
                console.log(width);
                console.log(height);
                console.log('Quality');
                console.log(quality);
                /** @type {?} */
                var cvs = document.createElement('canvas');
                cvs.width = width;
                cvs.height = height;
                /** @type {?} */
                var ctx = cvs.getContext('2d').drawImage(sourceImgObj, 0, 0, width, height);
                /** @type {?} */
                var newImageData = cvs.toDataURL(mimeType, quality / 100);
                /** @type {?} */
                var resultImageObj = new Image();
                resultImageObj.src = newImageData;
                return resultImageObj.src;
            };
        /**
         * @param {?} sourceImage
         * @param {?} options
         * @param {?} callback
         * @return {?}
         */
        ImageCompressService.compressImage = /**
         * @param {?} sourceImage
         * @param {?} options
         * @param {?} callback
         * @return {?}
         */
            function (sourceImage, options, callback) {
                /** @type {?} */
                var that = this;
                ImageUtilityService.createImage(sourceImage.imageDataUrl, function (image) {
                    /** @type {?} */
                    var dataURLcompressed = that.jicCompress(image, options);
                    sourceImage.compressedImage = {
                        fileName: sourceImage.fileName,
                        imageObjectUrl: "",
                        imageDataUrl: dataURLcompressed,
                        type: dataURLcompressed.match(/:(.+\/.+);/)[1],
                        compressedImage: null
                    };
                    callback(sourceImage);
                });
            };
        /**
         * @param {?} fileList
         * @param {?} option
         * @return {?}
         */
        ImageCompressService.filesToCompressedImageSourceEx = /**
         * @param {?} fileList
         * @param {?} option
         * @return {?}
         */
            function (fileList, option) {
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var count = fileList.length;
                    /** @type {?} */
                    var observer = ImageUtilityService.filesToSourceImages(fileList);
                    /** @type {?} */
                    var images = [];
                    observer.subscribe(function (image) {
                        images.push(image);
                        if (option == null) {
                            option = new ResizeOptions();
                        }
                        ImageCompressService.compressImage(image, option, function (imageRef) {
                            if (--count == 0) {
                                resolve(rxjs.from(images));
                            }
                        });
                    }, function (error) {
                        reject("Error while compressing images");
                    });
                });
            };
        /**
         * @param {?} fileList
         * @return {?}
         */
        ImageCompressService.filesToCompressedImageSource = /**
         * @param {?} fileList
         * @return {?}
         */
            function (fileList) {
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var count = fileList.length;
                    /** @type {?} */
                    var observer = ImageUtilityService.filesToSourceImages(fileList);
                    /** @type {?} */
                    var images = [];
                    observer.subscribe(function (image) {
                        images.push(image);
                        ImageCompressService.compressImage(image, new ResizeOptions(), function (imageRef) {
                            if (--count == 0) {
                                resolve(rxjs.from(images));
                            }
                        });
                    }, function (error) {
                        reject("Error while compressing images");
                    });
                });
            };
        /**
         * @param {?} fileList
         * @param {?} option
         * @return {?}
         */
        ImageCompressService.filesArrayToCompressedImageSourceEx = /**
         * @param {?} fileList
         * @param {?} option
         * @return {?}
         */
            function (fileList, option) {
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var count = fileList.length;
                    /** @type {?} */
                    var observer = ImageUtilityService.filesArrayToSourceImages(fileList);
                    /** @type {?} */
                    var images = [];
                    observer.subscribe(function (image) {
                        images.push(image);
                        if (option == null) {
                            option = new ResizeOptions();
                        }
                        ImageCompressService.compressImage(image, option, function (imageRef) {
                            if (--count == 0) {
                                resolve(rxjs.from(images));
                            }
                        });
                    }, function (error) {
                        reject("Error while compressing images");
                    });
                });
            };
        /**
         * @param {?} fileList
         * @return {?}
         */
        ImageCompressService.filesArrayToCompressedImageSource = /**
         * @param {?} fileList
         * @return {?}
         */
            function (fileList) {
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var count = fileList.length;
                    /** @type {?} */
                    var observer = ImageUtilityService.filesArrayToSourceImages(fileList);
                    /** @type {?} */
                    var images = [];
                    observer.subscribe(function (image) {
                        images.push(image);
                        ImageCompressService.compressImage(image, new ResizeOptions(), function (imageRef) {
                            if (--count == 0) {
                                resolve(rxjs.from(images));
                            }
                        });
                    }, function (error) {
                        reject("Error while compressing images");
                    });
                });
            };
        /**
         * @param {?} images
         * @return {?}
         */
        ImageCompressService.IImageListToCompressedImageSource = /**
         * @param {?} images
         * @return {?}
         */
            function (images) {
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var count = images.length;
                    images.forEach(function (image) {
                        ImageCompressService.compressImage(image, new ResizeOptions(), function (imageRef) {
                            console.log(image);
                            if (--count == 0) {
                                resolve(images);
                            }
                        });
                    });
                });
            };
        /**
         * @param {?} images
         * @param {?} resizeOption
         * @return {?}
         */
        ImageCompressService.IImageListToCompressedImageSourceEx = /**
         * @param {?} images
         * @param {?} resizeOption
         * @return {?}
         */
            function (images, resizeOption) {
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var count = images.length;
                    images.forEach(function (image) {
                        if (resizeOption == null) {
                            resizeOption = new ResizeOptions();
                        }
                        ImageCompressService.compressImage(image, resizeOption, function (imageRef) {
                            console.log(image);
                            if (--count == 0) {
                                resolve(images);
                            }
                        });
                    });
                });
            };
        ImageCompressService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ ImageCompressService.ngInjectableDef = i0.defineInjectable({ factory: function ImageCompressService_Factory() { return new ImageCompressService(); }, token: ImageCompressService, providedIn: "root" });
        return ImageCompressService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ImageCompressModule = /** @class */ (function () {
        function ImageCompressModule() {
        }
        /**
         * @return {?}
         */
        ImageCompressModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: ImageCompressModule,
                    providers: [ImageCompressService, ImageUtilityService]
                };
            };
        ImageCompressModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        providers: [ImageUtilityService, ImageCompressService]
                    },] }
        ];
        return ImageCompressModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ImageCompressService = ImageCompressService;
    exports.ImageCompressModule = ImageCompressModule;
    exports.ResizeOptions = ResizeOptions;
    exports.ImageUtilityService = ImageUtilityService;
    exports.SourceImage = SourceImage;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,