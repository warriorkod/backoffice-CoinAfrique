{"version":3,"file":"ng2-image-compress.umd.js.map","sources":["ng://ng2-image-compress/lib/ResizeOptions.ts","ng://ng2-image-compress/lib/CompressImage.ts","ng://ng2-image-compress/lib/imageUtilityService.ts","ng://ng2-image-compress/lib/ng2-image-compress.service.ts","ng://ng2-image-compress/lib/ng2-image-compress.module.ts"],"sourcesContent":["export class ResizeOptions {\r\n    public Resize_Max_Height = 800;\r\n    public Resize_Max_Width = 1000;\r\n    public Resize_Quality = 70;\r\n    public Resize_Type = 'image/jpg';\r\n}\r\n","export interface IImage{\r\n    fileName:string\r\n    imageObjectUrl:string\r\n    imageDataUrl:string\r\n    type:string\r\n    compressedImage:IImage\r\n}\r\n\r\nexport  class SourceImage implements IImage{\r\n    public fileName:string;\r\n    public imageObjectUrl:string;\r\n    public imageDataUrl:string;\r\n    public type:string;\r\n    public compressedImage:IImage\r\n}\r\n","import { SourceImage, IImage } from \"./CompressImage\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Observer } from \"rxjs\";\r\n\r\nexport class ImageUtilityService {\r\n\r\n    public static createImage(url, callback) {\r\n        var image = new Image();\r\n        image.onload = () => {\r\n            callback(image);\r\n        };\r\n        image.src = url;\r\n    }\r\n\r\n    public static fileToDataURL(file): Promise<any> {\r\n        return new Promise<any>((resolve) => {\r\n            let reader = new FileReader();\r\n            reader.onload = function (e: any) {\r\n                resolve(e.target.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        });\r\n    }\r\n\r\n    public static filesToSourceImages(fileList: FileList): Observable<IImage> {\r\n\r\n        return Observable.create((observer: Observer<IImage>) => {\r\n            let total = fileList.length;\r\n            Array.from(fileList).forEach(fileItem => {\r\n                let imageResult: IImage = new SourceImage();\r\n                console.log(fileItem.name);\r\n                \r\n                imageResult.fileName = fileItem.name;\r\n                imageResult.type = fileItem.type;\r\n                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);\r\n                ImageUtilityService.fileToDataURL(fileItem).then((result) => {\r\n                    imageResult.imageDataUrl = result;\r\n                    observer.next(imageResult);\r\n                    if (--total === 0)\r\n                        observer.complete();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public static filesArrayToSourceImages(fileList: File[]): Observable<IImage> {\r\n\r\n        return Observable.create((observer: Observer<IImage>) => {\r\n            let total = fileList.length;\r\n            fileList.forEach(fileItem => {\r\n                let imageResult: IImage = new SourceImage();\r\n                console.log(fileItem.name);\r\n                // imageResult.fileName = fileItem.name;\r\n                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);\r\n                ImageUtilityService.fileToDataURL(fileItem).then((result) => {\r\n                    imageResult.imageDataUrl = result;\r\n                    observer.next(imageResult);\r\n                    if (--total === 0)\r\n                        observer.complete();\r\n                });\r\n            });\r\n        });\r\n    }\r\n}","import { Injectable } from '@angular/core'; \nimport { ResizeOptions } from \"./ResizeOptions\"\nimport { SourceImage, IImage } from \"./CompressImage\";\nimport { ImageUtilityService } from \"./imageUtilityService\";\nimport { Observable } from \"rxjs\" \nimport { from as Observablefrom} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ImageCompressService {\n\n  \n\n  private static jicCompress(sourceImgObj, options: ResizeOptions) {\n      var outputFormat = options.Resize_Type;\n      var quality = options.Resize_Quality || 50;\n      var mimeType = 'image/jpeg';\n      if (outputFormat !== undefined && outputFormat === 'png') {\n          mimeType = 'image/png';\n      }\n\n\n      var maxHeight = options.Resize_Max_Height || 300;\n      var maxWidth = options.Resize_Max_Width || 250;\n\n      console.log('MAX Width n Height');\n      console.log(options.Resize_Max_Height);\n      console.log(options.Resize_Max_Width);\n      console.log('Quality');\n      console.log(quality);\n\n      var height = sourceImgObj.height;\n      var width = sourceImgObj.width;\n\n      // calculate the width and height, constraining the proportions\n      if (width > height) {\n          if (width > maxWidth) {\n              height = Math.round(height *= maxWidth / width);\n              width = maxWidth;\n          }\n      }\n      else {\n          if (height > maxHeight) {\n              width = Math.round(width *= maxHeight / height);\n              height = maxHeight;\n          }\n      }\n      console.log('CVS Width n Height');\n      console.log(width);\n      console.log(height);\n      console.log('Quality');\n      console.log(quality);\n\n      var cvs = document.createElement('canvas');\n      cvs.width = width;\n      cvs.height = height;\n      var ctx = cvs.getContext('2d').drawImage(sourceImgObj, 0, 0, width, height);\n      var newImageData = cvs.toDataURL(mimeType, quality / 100);\n      var resultImageObj = new Image();\n      resultImageObj.src = newImageData;\n      return resultImageObj.src;\n  }\n\n   \n\n  public static compressImage(sourceImage: IImage, options: ResizeOptions, callback) {\n      let that = this;\n      ImageUtilityService.createImage(sourceImage.imageDataUrl, function (image) {\n          var dataURLcompressed = that.jicCompress(image, options);\n          sourceImage.compressedImage = {\n              fileName: sourceImage.fileName,\n              imageObjectUrl: \"\",\n              imageDataUrl: dataURLcompressed,\n              type: dataURLcompressed.match(/:(.+\\/.+);/)[1],\n              compressedImage: null\n          };\n          callback(sourceImage);\n      });\n  }\n\n  public static filesToCompressedImageSourceEx(fileList: FileList, option: ResizeOptions): Promise<Observable<IImage>> {\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n              if (option == null) {\n                  option = new ResizeOptions();\n              }\n              ImageCompressService.compressImage(image, option, (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n\n  public static filesToCompressedImageSource(fileList: FileList): Promise<Observable<IImage>> {\n\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n\n              ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n\n  public static filesArrayToCompressedImageSourceEx(fileList: File[], option: ResizeOptions): Promise<Observable<IImage>> {\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesArrayToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n              if (option == null) {\n                  option = new ResizeOptions();\n              }\n              ImageCompressService.compressImage(image, option, (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n  public static filesArrayToCompressedImageSource(fileList: File[]): Promise<Observable<IImage>> {\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesArrayToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n              ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n\n  public static IImageListToCompressedImageSource(images: IImage[]): Promise<IImage[]> {\n\n      return new Promise<IImage[]>((resolve, reject) => {\n          let count = images.length;\n          images.forEach(image => {\n              ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n                  console.log(image);\n                  if (--count == 0) {\n                      resolve(images);\n                  }\n              });\n          });\n\n      });\n  }\n\n  public static IImageListToCompressedImageSourceEx(images: IImage[], resizeOption: ResizeOptions): Promise<IImage[]> {\n      return new Promise<IImage[]>((resolve, reject) => {\n          let count = images.length;\n          images.forEach(image => {\n              if (resizeOption == null) {\n                  resizeOption = new ResizeOptions();\n              }\n              ImageCompressService.compressImage(image, resizeOption, (imageRef) => {\n                  console.log(image);\n                  if (--count == 0) {\n                      resolve(images);\n                  }\n              });\n          });\n\n      });\n  }\n\n}\n\n","import { NgModule,ModuleWithProviders  } from '@angular/core';\nimport { ImageUtilityService } from \"./imageUtilityService\"\nimport { ImageCompressService } from \"./ng2-image-compress.service\"\n\n@NgModule({\n  imports: [\n  ],\n  providers: [ImageUtilityService,ImageCompressService ]\n})\nexport class ImageCompressModule { \n\n  static forRoot(): ModuleWithProviders {\n    return {\n        ngModule: ImageCompressModule,\n        providers: [ImageCompressService, ImageUtilityService]\n    };\n}\n}\n"],"names":["Observable","Observablefrom","Injectable","NgModule"],"mappings":"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"}
