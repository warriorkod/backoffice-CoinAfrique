{"version":3,"sources":["ng://ng2-image-compress/lib/ResizeOptions.ts","ng://ng2-image-compress/lib/CompressImage.ts","ng://ng2-image-compress/lib/imageUtilityService.ts","ng://ng2-image-compress/lib/ng2-image-compress.service.ts","ng://ng2-image-compress/lib/ng2-image-compress.module.ts"],"names":["ResizeOptions","this","Resize_Max_Height","Resize_Max_Width","Resize_Quality","Resize_Type","SourceImage","ImageUtilityService","createImage","url","callback","image","Image","onload","src","fileToDataURL","file","Promise","resolve","reader","FileReader","e","target","result","readAsDataURL","filesToSourceImages","fileList","Observable","create","observer","total","length","Array","from","forEach","fileItem","imageResult","console","log","name","fileName","type","imageObjectUrl","URL","createObjectURL","then","imageDataUrl","next","complete","filesArrayToSourceImages","ImageCompressService","jicCompress","sourceImgObj","options","outputFormat","quality","mimeType","undefined","maxHeight","maxWidth","height","width","Math","round","cvs","document","createElement","getContext","drawImage","newImageData","toDataURL","resultImageObj","compressImage","sourceImage","that","dataURLcompressed","compressedImage","match","filesToCompressedImageSourceEx","option","reject","count","images","subscribe","push","imageRef","Observablefrom","error","filesToCompressedImageSource","filesArrayToCompressedImageSourceEx","filesArrayToCompressedImageSource","IImageListToCompressedImageSource","IImageListToCompressedImageSourceEx","resizeOption","Injectable","args","providedIn","ImageCompressModule","forRoot","ngModule","providers","NgModule","imports"],"mappings":"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","sourcesContent":["export class ResizeOptions {\r\n    public Resize_Max_Height = 800;\r\n    public Resize_Max_Width = 1000;\r\n    public Resize_Quality = 70;\r\n    public Resize_Type = 'image/jpg';\r\n}\r\n","export interface IImage{\r\n    fileName:string\r\n    imageObjectUrl:string\r\n    imageDataUrl:string\r\n    type:string\r\n    compressedImage:IImage\r\n}\r\n\r\nexport  class SourceImage implements IImage{\r\n    public fileName:string;\r\n    public imageObjectUrl:string;\r\n    public imageDataUrl:string;\r\n    public type:string;\r\n    public compressedImage:IImage\r\n}\r\n","import { SourceImage, IImage } from \"./CompressImage\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Observer } from \"rxjs\";\r\n\r\nexport class ImageUtilityService {\r\n\r\n    public static createImage(url, callback) {\r\n        var image = new Image();\r\n        image.onload = () => {\r\n            callback(image);\r\n        };\r\n        image.src = url;\r\n    }\r\n\r\n    public static fileToDataURL(file): Promise<any> {\r\n        return new Promise<any>((resolve) => {\r\n            let reader = new FileReader();\r\n            reader.onload = function (e: any) {\r\n                resolve(e.target.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        });\r\n    }\r\n\r\n    public static filesToSourceImages(fileList: FileList): Observable<IImage> {\r\n\r\n        return Observable.create((observer: Observer<IImage>) => {\r\n            let total = fileList.length;\r\n            Array.from(fileList).forEach(fileItem => {\r\n                let imageResult: IImage = new SourceImage();\r\n                console.log(fileItem.name);\r\n                \r\n                imageResult.fileName = fileItem.name;\r\n                imageResult.type = fileItem.type;\r\n                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);\r\n                ImageUtilityService.fileToDataURL(fileItem).then((result) => {\r\n                    imageResult.imageDataUrl = result;\r\n                    observer.next(imageResult);\r\n                    if (--total === 0)\r\n                        observer.complete();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public static filesArrayToSourceImages(fileList: File[]): Observable<IImage> {\r\n\r\n        return Observable.create((observer: Observer<IImage>) => {\r\n            let total = fileList.length;\r\n            fileList.forEach(fileItem => {\r\n                let imageResult: IImage = new SourceImage();\r\n                console.log(fileItem.name);\r\n                // imageResult.fileName = fileItem.name;\r\n                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);\r\n                ImageUtilityService.fileToDataURL(fileItem).then((result) => {\r\n                    imageResult.imageDataUrl = result;\r\n                    observer.next(imageResult);\r\n                    if (--total === 0)\r\n                        observer.complete();\r\n                });\r\n            });\r\n        });\r\n    }\r\n}","import { Injectable } from '@angular/core'; \nimport { ResizeOptions } from \"./ResizeOptions\"\nimport { SourceImage, IImage } from \"./CompressImage\";\nimport { ImageUtilityService } from \"./imageUtilityService\";\nimport { Observable } from \"rxjs\" \nimport { from as Observablefrom} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ImageCompressService {\n\n  \n\n  private static jicCompress(sourceImgObj, options: ResizeOptions) {\n      var outputFormat = options.Resize_Type;\n      var quality = options.Resize_Quality || 50;\n      var mimeType = 'image/jpeg';\n      if (outputFormat !== undefined && outputFormat === 'png') {\n          mimeType = 'image/png';\n      }\n\n\n      var maxHeight = options.Resize_Max_Height || 300;\n      var maxWidth = options.Resize_Max_Width || 250;\n\n      console.log('MAX Width n Height');\n      console.log(options.Resize_Max_Height);\n      console.log(options.Resize_Max_Width);\n      console.log('Quality');\n      console.log(quality);\n\n      var height = sourceImgObj.height;\n      var width = sourceImgObj.width;\n\n      // calculate the width and height, constraining the proportions\n      if (width > height) {\n          if (width > maxWidth) {\n              height = Math.round(height *= maxWidth / width);\n              width = maxWidth;\n          }\n      }\n      else {\n          if (height > maxHeight) {\n              width = Math.round(width *= maxHeight / height);\n              height = maxHeight;\n          }\n      }\n      console.log('CVS Width n Height');\n      console.log(width);\n      console.log(height);\n      console.log('Quality');\n      console.log(quality);\n\n      var cvs = document.createElement('canvas');\n      cvs.width = width;\n      cvs.height = height;\n      var ctx = cvs.getContext('2d').drawImage(sourceImgObj, 0, 0, width, height);\n      var newImageData = cvs.toDataURL(mimeType, quality / 100);\n      var resultImageObj = new Image();\n      resultImageObj.src = newImageData;\n      return resultImageObj.src;\n  }\n\n   \n\n  public static compressImage(sourceImage: IImage, options: ResizeOptions, callback) {\n      let that = this;\n      ImageUtilityService.createImage(sourceImage.imageDataUrl, function (image) {\n          var dataURLcompressed = that.jicCompress(image, options);\n          sourceImage.compressedImage = {\n              fileName: sourceImage.fileName,\n              imageObjectUrl: \"\",\n              imageDataUrl: dataURLcompressed,\n              type: dataURLcompressed.match(/:(.+\\/.+);/)[1],\n              compressedImage: null\n          };\n          callback(sourceImage);\n      });\n  }\n\n  public static filesToCompressedImageSourceEx(fileList: FileList, option: ResizeOptions): Promise<Observable<IImage>> {\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n              if (option == null) {\n                  option = new ResizeOptions();\n              }\n              ImageCompressService.compressImage(image, option, (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n\n  public static filesToCompressedImageSource(fileList: FileList): Promise<Observable<IImage>> {\n\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n\n              ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n\n  public static filesArrayToCompressedImageSourceEx(fileList: File[], option: ResizeOptions): Promise<Observable<IImage>> {\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesArrayToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n              if (option == null) {\n                  option = new ResizeOptions();\n              }\n              ImageCompressService.compressImage(image, option, (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n  public static filesArrayToCompressedImageSource(fileList: File[]): Promise<Observable<IImage>> {\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesArrayToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n              ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n\n  public static IImageListToCompressedImageSource(images: IImage[]): Promise<IImage[]> {\n\n      return new Promise<IImage[]>((resolve, reject) => {\n          let count = images.length;\n          images.forEach(image => {\n              ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n                  console.log(image);\n                  if (--count == 0) {\n                      resolve(images);\n                  }\n              });\n          });\n\n      });\n  }\n\n  public static IImageListToCompressedImageSourceEx(images: IImage[], resizeOption: ResizeOptions): Promise<IImage[]> {\n      return new Promise<IImage[]>((resolve, reject) => {\n          let count = images.length;\n          images.forEach(image => {\n              if (resizeOption == null) {\n                  resizeOption = new ResizeOptions();\n              }\n              ImageCompressService.compressImage(image, resizeOption, (imageRef) => {\n                  console.log(image);\n                  if (--count == 0) {\n                      resolve(images);\n                  }\n              });\n          });\n\n      });\n  }\n\n}\n\n","import { NgModule,ModuleWithProviders  } from '@angular/core';\nimport { ImageUtilityService } from \"./imageUtilityService\"\nimport { ImageCompressService } from \"./ng2-image-compress.service\"\n\n@NgModule({\n  imports: [\n  ],\n  providers: [ImageUtilityService,ImageCompressService ]\n})\nexport class ImageCompressModule { \n\n  static forRoot(): ModuleWithProviders {\n    return {\n        ngModule: ImageCompressModule,\n        providers: [ImageCompressService, ImageUtilityService]\n    };\n}\n}\n"]}