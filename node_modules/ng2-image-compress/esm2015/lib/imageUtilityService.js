/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SourceImage } from "./CompressImage";
import { Observable } from "rxjs";
export class ImageUtilityService {
    /**
     * @param {?} url
     * @param {?} callback
     * @return {?}
     */
    static createImage(url, callback) {
        /** @type {?} */
        var image = new Image();
        image.onload = () => {
            callback(image);
        };
        image.src = url;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    static fileToDataURL(file) {
        return new Promise((resolve) => {
            /** @type {?} */
            let reader = new FileReader();
            reader.onload = function (e) {
                resolve(e.target.result);
            };
            reader.readAsDataURL(file);
        });
    }
    /**
     * @param {?} fileList
     * @return {?}
     */
    static filesToSourceImages(fileList) {
        return Observable.create((observer) => {
            /** @type {?} */
            let total = fileList.length;
            Array.from(fileList).forEach(fileItem => {
                /** @type {?} */
                let imageResult = new SourceImage();
                console.log(fileItem.name);
                imageResult.fileName = fileItem.name;
                imageResult.type = fileItem.type;
                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);
                ImageUtilityService.fileToDataURL(fileItem).then((result) => {
                    imageResult.imageDataUrl = result;
                    observer.next(imageResult);
                    if (--total === 0)
                        observer.complete();
                });
            });
        });
    }
    /**
     * @param {?} fileList
     * @return {?}
     */
    static filesArrayToSourceImages(fileList) {
        return Observable.create((observer) => {
            /** @type {?} */
            let total = fileList.length;
            fileList.forEach(fileItem => {
                /** @type {?} */
                let imageResult = new SourceImage();
                console.log(fileItem.name);
                // imageResult.fileName = fileItem.name;
                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);
                ImageUtilityService.fileToDataURL(fileItem).then((result) => {
                    imageResult.imageDataUrl = result;
                    observer.next(imageResult);
                    if (--total === 0)
                        observer.complete();
                });
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VVdGlsaXR5U2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nMi1pbWFnZS1jb21wcmVzcy8iLCJzb3VyY2VzIjpbImxpYi9pbWFnZVV0aWxpdHlTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFVLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdsQyxNQUFNLE9BQU8sbUJBQW1COzs7Ozs7SUFFckIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsUUFBUTs7WUFDL0IsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFO1FBQ3ZCLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ2hCLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUM7UUFDRixLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNwQixDQUFDOzs7OztJQUVNLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSTtRQUM1QixPQUFPLElBQUksT0FBTyxDQUFNLENBQUMsT0FBTyxFQUFFLEVBQUU7O2dCQUM1QixNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7WUFDN0IsTUFBTSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQU07Z0JBQzVCLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQztZQUNGLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVNLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxRQUFrQjtRQUVoRCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUEwQixFQUFFLEVBQUU7O2dCQUNoRCxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU07WUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7O29CQUNoQyxXQUFXLEdBQVcsSUFBSSxXQUFXLEVBQUU7Z0JBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUUzQixXQUFXLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7Z0JBQ3JDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztnQkFDakMsV0FBVyxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMzRCxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ3hELFdBQVcsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO29CQUNsQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUMzQixJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUM7d0JBQ2IsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUM1QixDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVNLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxRQUFnQjtRQUVuRCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUEwQixFQUFFLEVBQUU7O2dCQUNoRCxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU07WUFDM0IsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTs7b0JBQ3BCLFdBQVcsR0FBVyxJQUFJLFdBQVcsRUFBRTtnQkFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzNCLHdDQUF3QztnQkFDeEMsV0FBVyxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMzRCxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ3hELFdBQVcsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO29CQUNsQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUMzQixJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUM7d0JBQ2IsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUM1QixDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTb3VyY2VJbWFnZSwgSUltYWdlIH0gZnJvbSBcIi4vQ29tcHJlc3NJbWFnZVwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgT2JzZXJ2ZXIgfSBmcm9tIFwicnhqc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEltYWdlVXRpbGl0eVNlcnZpY2Uge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlSW1hZ2UodXJsLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgY2FsbGJhY2soaW1hZ2UpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaW1hZ2Uuc3JjID0gdXJsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZmlsZVRvRGF0YVVSTChmaWxlKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBmaWxlc1RvU291cmNlSW1hZ2VzKGZpbGVMaXN0OiBGaWxlTGlzdCk6IE9ic2VydmFibGU8SUltYWdlPiB7XHJcblxyXG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXI6IE9ic2VydmVyPElJbWFnZT4pID0+IHtcclxuICAgICAgICAgICAgbGV0IHRvdGFsID0gZmlsZUxpc3QubGVuZ3RoO1xyXG4gICAgICAgICAgICBBcnJheS5mcm9tKGZpbGVMaXN0KS5mb3JFYWNoKGZpbGVJdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBpbWFnZVJlc3VsdDogSUltYWdlID0gbmV3IFNvdXJjZUltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmaWxlSXRlbS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaW1hZ2VSZXN1bHQuZmlsZU5hbWUgPSBmaWxlSXRlbS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VSZXN1bHQudHlwZSA9IGZpbGVJdGVtLnR5cGU7XHJcbiAgICAgICAgICAgICAgICBpbWFnZVJlc3VsdC5pbWFnZU9iamVjdFVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZUl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgSW1hZ2VVdGlsaXR5U2VydmljZS5maWxlVG9EYXRhVVJMKGZpbGVJdGVtKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZVJlc3VsdC5pbWFnZURhdGFVcmwgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpbWFnZVJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKC0tdG90YWwgPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBmaWxlc0FycmF5VG9Tb3VyY2VJbWFnZXMoZmlsZUxpc3Q6IEZpbGVbXSk6IE9ic2VydmFibGU8SUltYWdlPiB7XHJcblxyXG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXI6IE9ic2VydmVyPElJbWFnZT4pID0+IHtcclxuICAgICAgICAgICAgbGV0IHRvdGFsID0gZmlsZUxpc3QubGVuZ3RoO1xyXG4gICAgICAgICAgICBmaWxlTGlzdC5mb3JFYWNoKGZpbGVJdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBpbWFnZVJlc3VsdDogSUltYWdlID0gbmV3IFNvdXJjZUltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmaWxlSXRlbS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIC8vIGltYWdlUmVzdWx0LmZpbGVOYW1lID0gZmlsZUl0ZW0ubmFtZTtcclxuICAgICAgICAgICAgICAgIGltYWdlUmVzdWx0LmltYWdlT2JqZWN0VXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlSXRlbSk7XHJcbiAgICAgICAgICAgICAgICBJbWFnZVV0aWxpdHlTZXJ2aWNlLmZpbGVUb0RhdGFVUkwoZmlsZUl0ZW0pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlUmVzdWx0LmltYWdlRGF0YVVybCA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGltYWdlUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoLS10b3RhbCA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdfQ==