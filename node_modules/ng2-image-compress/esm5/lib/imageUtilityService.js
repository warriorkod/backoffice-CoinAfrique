/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SourceImage } from "./CompressImage";
import { Observable } from "rxjs";
var ImageUtilityService = /** @class */ (function () {
    function ImageUtilityService() {
    }
    /**
     * @param {?} url
     * @param {?} callback
     * @return {?}
     */
    ImageUtilityService.createImage = /**
     * @param {?} url
     * @param {?} callback
     * @return {?}
     */
    function (url, callback) {
        /** @type {?} */
        var image = new Image();
        image.onload = function () {
            callback(image);
        };
        image.src = url;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ImageUtilityService.fileToDataURL = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return new Promise(function (resolve) {
            /** @type {?} */
            var reader = new FileReader();
            reader.onload = function (e) {
                resolve(e.target.result);
            };
            reader.readAsDataURL(file);
        });
    };
    /**
     * @param {?} fileList
     * @return {?}
     */
    ImageUtilityService.filesToSourceImages = /**
     * @param {?} fileList
     * @return {?}
     */
    function (fileList) {
        return Observable.create(function (observer) {
            /** @type {?} */
            var total = fileList.length;
            Array.from(fileList).forEach(function (fileItem) {
                /** @type {?} */
                var imageResult = new SourceImage();
                console.log(fileItem.name);
                imageResult.fileName = fileItem.name;
                imageResult.type = fileItem.type;
                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);
                ImageUtilityService.fileToDataURL(fileItem).then(function (result) {
                    imageResult.imageDataUrl = result;
                    observer.next(imageResult);
                    if (--total === 0)
                        observer.complete();
                });
            });
        });
    };
    /**
     * @param {?} fileList
     * @return {?}
     */
    ImageUtilityService.filesArrayToSourceImages = /**
     * @param {?} fileList
     * @return {?}
     */
    function (fileList) {
        return Observable.create(function (observer) {
            /** @type {?} */
            var total = fileList.length;
            fileList.forEach(function (fileItem) {
                /** @type {?} */
                var imageResult = new SourceImage();
                console.log(fileItem.name);
                // imageResult.fileName = fileItem.name;
                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);
                ImageUtilityService.fileToDataURL(fileItem).then(function (result) {
                    imageResult.imageDataUrl = result;
                    observer.next(imageResult);
                    if (--total === 0)
                        observer.complete();
                });
            });
        });
    };
    return ImageUtilityService;
}());
export { ImageUtilityService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VVdGlsaXR5U2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nMi1pbWFnZS1jb21wcmVzcy8iLCJzb3VyY2VzIjpbImxpYi9pbWFnZVV0aWxpdHlTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFVLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdsQztJQUFBO0lBMkRBLENBQUM7Ozs7OztJQXpEaUIsK0JBQVc7Ozs7O0lBQXpCLFVBQTBCLEdBQUcsRUFBRSxRQUFROztZQUMvQixLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUU7UUFDdkIsS0FBSyxDQUFDLE1BQU0sR0FBRztZQUNYLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUM7UUFDRixLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNwQixDQUFDOzs7OztJQUVhLGlDQUFhOzs7O0lBQTNCLFVBQTRCLElBQUk7UUFDNUIsT0FBTyxJQUFJLE9BQU8sQ0FBTSxVQUFDLE9BQU87O2dCQUN4QixNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7WUFDN0IsTUFBTSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQU07Z0JBQzVCLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQztZQUNGLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVhLHVDQUFtQjs7OztJQUFqQyxVQUFrQyxRQUFrQjtRQUVoRCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUEwQjs7Z0JBQzVDLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTTtZQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFFBQVE7O29CQUM3QixXQUFXLEdBQVcsSUFBSSxXQUFXLEVBQUU7Z0JBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUUzQixXQUFXLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7Z0JBQ3JDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztnQkFDakMsV0FBVyxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMzRCxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsTUFBTTtvQkFDcEQsV0FBVyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUM7b0JBQ2xDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQzNCLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQzt3QkFDYixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQzVCLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRWEsNENBQXdCOzs7O0lBQXRDLFVBQXVDLFFBQWdCO1FBRW5ELE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFDLFFBQTBCOztnQkFDNUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNO1lBQzNCLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQSxRQUFROztvQkFDakIsV0FBVyxHQUFXLElBQUksV0FBVyxFQUFFO2dCQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDM0Isd0NBQXdDO2dCQUN4QyxXQUFXLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzNELG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxNQUFNO29CQUNwRCxXQUFXLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztvQkFDbEMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDM0IsSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDO3dCQUNiLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNMLDBCQUFDO0FBQUQsQ0FBQyxBQTNERCxJQTJEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvdXJjZUltYWdlLCBJSW1hZ2UgfSBmcm9tIFwiLi9Db21wcmVzc0ltYWdlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBPYnNlcnZlciB9IGZyb20gXCJyeGpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSW1hZ2VVdGlsaXR5U2VydmljZSB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVJbWFnZSh1cmwsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhpbWFnZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpbWFnZS5zcmMgPSB1cmw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBmaWxlVG9EYXRhVVJMKGZpbGUpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxhbnk+KChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGZpbGVzVG9Tb3VyY2VJbWFnZXMoZmlsZUxpc3Q6IEZpbGVMaXN0KTogT2JzZXJ2YWJsZTxJSW1hZ2U+IHtcclxuXHJcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcjogT2JzZXJ2ZXI8SUltYWdlPikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdG90YWwgPSBmaWxlTGlzdC5sZW5ndGg7XHJcbiAgICAgICAgICAgIEFycmF5LmZyb20oZmlsZUxpc3QpLmZvckVhY2goZmlsZUl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGltYWdlUmVzdWx0OiBJSW1hZ2UgPSBuZXcgU291cmNlSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbGVJdGVtLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpbWFnZVJlc3VsdC5maWxlTmFtZSA9IGZpbGVJdGVtLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBpbWFnZVJlc3VsdC50eXBlID0gZmlsZUl0ZW0udHlwZTtcclxuICAgICAgICAgICAgICAgIGltYWdlUmVzdWx0LmltYWdlT2JqZWN0VXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlSXRlbSk7XHJcbiAgICAgICAgICAgICAgICBJbWFnZVV0aWxpdHlTZXJ2aWNlLmZpbGVUb0RhdGFVUkwoZmlsZUl0ZW0pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlUmVzdWx0LmltYWdlRGF0YVVybCA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGltYWdlUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoLS10b3RhbCA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGZpbGVzQXJyYXlUb1NvdXJjZUltYWdlcyhmaWxlTGlzdDogRmlsZVtdKTogT2JzZXJ2YWJsZTxJSW1hZ2U+IHtcclxuXHJcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcjogT2JzZXJ2ZXI8SUltYWdlPikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdG90YWwgPSBmaWxlTGlzdC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZmlsZUl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGltYWdlUmVzdWx0OiBJSW1hZ2UgPSBuZXcgU291cmNlSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbGVJdGVtLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgLy8gaW1hZ2VSZXN1bHQuZmlsZU5hbWUgPSBmaWxlSXRlbS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VSZXN1bHQuaW1hZ2VPYmplY3RVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGVJdGVtKTtcclxuICAgICAgICAgICAgICAgIEltYWdlVXRpbGl0eVNlcnZpY2UuZmlsZVRvRGF0YVVSTChmaWxlSXRlbSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VSZXN1bHQuaW1hZ2VEYXRhVXJsID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaW1hZ2VSZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgtLXRvdGFsID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59Il19