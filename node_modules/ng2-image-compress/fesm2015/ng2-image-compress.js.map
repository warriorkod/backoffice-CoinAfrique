{"version":3,"file":"ng2-image-compress.js.map","sources":["ng://ng2-image-compress/lib/ResizeOptions.ts","ng://ng2-image-compress/lib/CompressImage.ts","ng://ng2-image-compress/lib/imageUtilityService.ts","ng://ng2-image-compress/lib/ng2-image-compress.service.ts","ng://ng2-image-compress/lib/ng2-image-compress.module.ts"],"sourcesContent":["export class ResizeOptions {\r\n    public Resize_Max_Height = 800;\r\n    public Resize_Max_Width = 1000;\r\n    public Resize_Quality = 70;\r\n    public Resize_Type = 'image/jpg';\r\n}\r\n","export interface IImage{\r\n    fileName:string\r\n    imageObjectUrl:string\r\n    imageDataUrl:string\r\n    type:string\r\n    compressedImage:IImage\r\n}\r\n\r\nexport  class SourceImage implements IImage{\r\n    public fileName:string;\r\n    public imageObjectUrl:string;\r\n    public imageDataUrl:string;\r\n    public type:string;\r\n    public compressedImage:IImage\r\n}\r\n","import { SourceImage, IImage } from \"./CompressImage\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Observer } from \"rxjs\";\r\n\r\nexport class ImageUtilityService {\r\n\r\n    public static createImage(url, callback) {\r\n        var image = new Image();\r\n        image.onload = () => {\r\n            callback(image);\r\n        };\r\n        image.src = url;\r\n    }\r\n\r\n    public static fileToDataURL(file): Promise<any> {\r\n        return new Promise<any>((resolve) => {\r\n            let reader = new FileReader();\r\n            reader.onload = function (e: any) {\r\n                resolve(e.target.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        });\r\n    }\r\n\r\n    public static filesToSourceImages(fileList: FileList): Observable<IImage> {\r\n\r\n        return Observable.create((observer: Observer<IImage>) => {\r\n            let total = fileList.length;\r\n            Array.from(fileList).forEach(fileItem => {\r\n                let imageResult: IImage = new SourceImage();\r\n                console.log(fileItem.name);\r\n                \r\n                imageResult.fileName = fileItem.name;\r\n                imageResult.type = fileItem.type;\r\n                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);\r\n                ImageUtilityService.fileToDataURL(fileItem).then((result) => {\r\n                    imageResult.imageDataUrl = result;\r\n                    observer.next(imageResult);\r\n                    if (--total === 0)\r\n                        observer.complete();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public static filesArrayToSourceImages(fileList: File[]): Observable<IImage> {\r\n\r\n        return Observable.create((observer: Observer<IImage>) => {\r\n            let total = fileList.length;\r\n            fileList.forEach(fileItem => {\r\n                let imageResult: IImage = new SourceImage();\r\n                console.log(fileItem.name);\r\n                // imageResult.fileName = fileItem.name;\r\n                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);\r\n                ImageUtilityService.fileToDataURL(fileItem).then((result) => {\r\n                    imageResult.imageDataUrl = result;\r\n                    observer.next(imageResult);\r\n                    if (--total === 0)\r\n                        observer.complete();\r\n                });\r\n            });\r\n        });\r\n    }\r\n}","import { Injectable } from '@angular/core'; \nimport { ResizeOptions } from \"./ResizeOptions\"\nimport { SourceImage, IImage } from \"./CompressImage\";\nimport { ImageUtilityService } from \"./imageUtilityService\";\nimport { Observable } from \"rxjs\" \nimport { from as Observablefrom} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ImageCompressService {\n\n  \n\n  private static jicCompress(sourceImgObj, options: ResizeOptions) {\n      var outputFormat = options.Resize_Type;\n      var quality = options.Resize_Quality || 50;\n      var mimeType = 'image/jpeg';\n      if (outputFormat !== undefined && outputFormat === 'png') {\n          mimeType = 'image/png';\n      }\n\n\n      var maxHeight = options.Resize_Max_Height || 300;\n      var maxWidth = options.Resize_Max_Width || 250;\n\n      console.log('MAX Width n Height');\n      console.log(options.Resize_Max_Height);\n      console.log(options.Resize_Max_Width);\n      console.log('Quality');\n      console.log(quality);\n\n      var height = sourceImgObj.height;\n      var width = sourceImgObj.width;\n\n      // calculate the width and height, constraining the proportions\n      if (width > height) {\n          if (width > maxWidth) {\n              height = Math.round(height *= maxWidth / width);\n              width = maxWidth;\n          }\n      }\n      else {\n          if (height > maxHeight) {\n              width = Math.round(width *= maxHeight / height);\n              height = maxHeight;\n          }\n      }\n      console.log('CVS Width n Height');\n      console.log(width);\n      console.log(height);\n      console.log('Quality');\n      console.log(quality);\n\n      var cvs = document.createElement('canvas');\n      cvs.width = width;\n      cvs.height = height;\n      var ctx = cvs.getContext('2d').drawImage(sourceImgObj, 0, 0, width, height);\n      var newImageData = cvs.toDataURL(mimeType, quality / 100);\n      var resultImageObj = new Image();\n      resultImageObj.src = newImageData;\n      return resultImageObj.src;\n  }\n\n   \n\n  public static compressImage(sourceImage: IImage, options: ResizeOptions, callback) {\n      let that = this;\n      ImageUtilityService.createImage(sourceImage.imageDataUrl, function (image) {\n          var dataURLcompressed = that.jicCompress(image, options);\n          sourceImage.compressedImage = {\n              fileName: sourceImage.fileName,\n              imageObjectUrl: \"\",\n              imageDataUrl: dataURLcompressed,\n              type: dataURLcompressed.match(/:(.+\\/.+);/)[1],\n              compressedImage: null\n          };\n          callback(sourceImage);\n      });\n  }\n\n  public static filesToCompressedImageSourceEx(fileList: FileList, option: ResizeOptions): Promise<Observable<IImage>> {\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n              if (option == null) {\n                  option = new ResizeOptions();\n              }\n              ImageCompressService.compressImage(image, option, (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n\n  public static filesToCompressedImageSource(fileList: FileList): Promise<Observable<IImage>> {\n\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n\n              ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n\n  public static filesArrayToCompressedImageSourceEx(fileList: File[], option: ResizeOptions): Promise<Observable<IImage>> {\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesArrayToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n              if (option == null) {\n                  option = new ResizeOptions();\n              }\n              ImageCompressService.compressImage(image, option, (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n  public static filesArrayToCompressedImageSource(fileList: File[]): Promise<Observable<IImage>> {\n\n      return new Promise<Observable<IImage>>((resolve, reject) => {\n          let count = fileList.length;\n          let observer = ImageUtilityService.filesArrayToSourceImages(fileList);\n          let images: Array<IImage> = [];\n          observer.subscribe((image) => {\n              images.push(image);\n              ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n                  if (--count == 0) {\n                      resolve(Observablefrom(images));\n                  }\n              });\n          }, (error) => {\n              reject(\"Error while compressing images\");\n          })\n      });\n  }\n\n  public static IImageListToCompressedImageSource(images: IImage[]): Promise<IImage[]> {\n\n      return new Promise<IImage[]>((resolve, reject) => {\n          let count = images.length;\n          images.forEach(image => {\n              ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n                  console.log(image);\n                  if (--count == 0) {\n                      resolve(images);\n                  }\n              });\n          });\n\n      });\n  }\n\n  public static IImageListToCompressedImageSourceEx(images: IImage[], resizeOption: ResizeOptions): Promise<IImage[]> {\n      return new Promise<IImage[]>((resolve, reject) => {\n          let count = images.length;\n          images.forEach(image => {\n              if (resizeOption == null) {\n                  resizeOption = new ResizeOptions();\n              }\n              ImageCompressService.compressImage(image, resizeOption, (imageRef) => {\n                  console.log(image);\n                  if (--count == 0) {\n                      resolve(images);\n                  }\n              });\n          });\n\n      });\n  }\n\n}\n\n","import { NgModule,ModuleWithProviders  } from '@angular/core';\nimport { ImageUtilityService } from \"./imageUtilityService\"\nimport { ImageCompressService } from \"./ng2-image-compress.service\"\n\n@NgModule({\n  imports: [\n  ],\n  providers: [ImageUtilityService,ImageCompressService ]\n})\nexport class ImageCompressModule { \n\n  static forRoot(): ModuleWithProviders {\n    return {\n        ngModule: ImageCompressModule,\n        providers: [ImageCompressService, ImageUtilityService]\n    };\n}\n}\n"],"names":["Observablefrom"],"mappings":"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"}
