import { Observable, from } from 'rxjs';
import { Injectable, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ResizeOptions {
    constructor() {
        this.Resize_Max_Height = 800;
        this.Resize_Max_Width = 1000;
        this.Resize_Quality = 70;
        this.Resize_Type = 'image/jpg';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SourceImage {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImageUtilityService {
    /**
     * @param {?} url
     * @param {?} callback
     * @return {?}
     */
    static createImage(url, callback) {
        /** @type {?} */
        var image = new Image();
        image.onload = () => {
            callback(image);
        };
        image.src = url;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    static fileToDataURL(file) {
        return new Promise((resolve) => {
            /** @type {?} */
            let reader = new FileReader();
            reader.onload = function (e) {
                resolve(e.target.result);
            };
            reader.readAsDataURL(file);
        });
    }
    /**
     * @param {?} fileList
     * @return {?}
     */
    static filesToSourceImages(fileList) {
        return Observable.create((observer) => {
            /** @type {?} */
            let total = fileList.length;
            Array.from(fileList).forEach(fileItem => {
                /** @type {?} */
                let imageResult = new SourceImage();
                console.log(fileItem.name);
                imageResult.fileName = fileItem.name;
                imageResult.type = fileItem.type;
                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);
                ImageUtilityService.fileToDataURL(fileItem).then((result) => {
                    imageResult.imageDataUrl = result;
                    observer.next(imageResult);
                    if (--total === 0)
                        observer.complete();
                });
            });
        });
    }
    /**
     * @param {?} fileList
     * @return {?}
     */
    static filesArrayToSourceImages(fileList) {
        return Observable.create((observer) => {
            /** @type {?} */
            let total = fileList.length;
            fileList.forEach(fileItem => {
                /** @type {?} */
                let imageResult = new SourceImage();
                console.log(fileItem.name);
                // imageResult.fileName = fileItem.name;
                imageResult.imageObjectUrl = URL.createObjectURL(fileItem);
                ImageUtilityService.fileToDataURL(fileItem).then((result) => {
                    imageResult.imageDataUrl = result;
                    observer.next(imageResult);
                    if (--total === 0)
                        observer.complete();
                });
            });
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImageCompressService {
    /**
     * @private
     * @param {?} sourceImgObj
     * @param {?} options
     * @return {?}
     */
    static jicCompress(sourceImgObj, options) {
        /** @type {?} */
        var outputFormat = options.Resize_Type;
        /** @type {?} */
        var quality = options.Resize_Quality || 50;
        /** @type {?} */
        var mimeType = 'image/jpeg';
        if (outputFormat !== undefined && outputFormat === 'png') {
            mimeType = 'image/png';
        }
        /** @type {?} */
        var maxHeight = options.Resize_Max_Height || 300;
        /** @type {?} */
        var maxWidth = options.Resize_Max_Width || 250;
        console.log('MAX Width n Height');
        console.log(options.Resize_Max_Height);
        console.log(options.Resize_Max_Width);
        console.log('Quality');
        console.log(quality);
        /** @type {?} */
        var height = sourceImgObj.height;
        /** @type {?} */
        var width = sourceImgObj.width;
        // calculate the width and height, constraining the proportions
        if (width > height) {
            if (width > maxWidth) {
                height = Math.round(height *= maxWidth / width);
                width = maxWidth;
            }
        }
        else {
            if (height > maxHeight) {
                width = Math.round(width *= maxHeight / height);
                height = maxHeight;
            }
        }
        console.log('CVS Width n Height');
        console.log(width);
        console.log(height);
        console.log('Quality');
        console.log(quality);
        /** @type {?} */
        var cvs = document.createElement('canvas');
        cvs.width = width;
        cvs.height = height;
        /** @type {?} */
        var ctx = cvs.getContext('2d').drawImage(sourceImgObj, 0, 0, width, height);
        /** @type {?} */
        var newImageData = cvs.toDataURL(mimeType, quality / 100);
        /** @type {?} */
        var resultImageObj = new Image();
        resultImageObj.src = newImageData;
        return resultImageObj.src;
    }
    /**
     * @param {?} sourceImage
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    static compressImage(sourceImage, options, callback) {
        /** @type {?} */
        let that = this;
        ImageUtilityService.createImage(sourceImage.imageDataUrl, function (image) {
            /** @type {?} */
            var dataURLcompressed = that.jicCompress(image, options);
            sourceImage.compressedImage = {
                fileName: sourceImage.fileName,
                imageObjectUrl: "",
                imageDataUrl: dataURLcompressed,
                type: dataURLcompressed.match(/:(.+\/.+);/)[1],
                compressedImage: null
            };
            callback(sourceImage);
        });
    }
    /**
     * @param {?} fileList
     * @param {?} option
     * @return {?}
     */
    static filesToCompressedImageSourceEx(fileList, option) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let count = fileList.length;
            /** @type {?} */
            let observer = ImageUtilityService.filesToSourceImages(fileList);
            /** @type {?} */
            let images = [];
            observer.subscribe((image) => {
                images.push(image);
                if (option == null) {
                    option = new ResizeOptions();
                }
                ImageCompressService.compressImage(image, option, (imageRef) => {
                    if (--count == 0) {
                        resolve(from(images));
                    }
                });
            }, (error) => {
                reject("Error while compressing images");
            });
        });
    }
    /**
     * @param {?} fileList
     * @return {?}
     */
    static filesToCompressedImageSource(fileList) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let count = fileList.length;
            /** @type {?} */
            let observer = ImageUtilityService.filesToSourceImages(fileList);
            /** @type {?} */
            let images = [];
            observer.subscribe((image) => {
                images.push(image);
                ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {
                    if (--count == 0) {
                        resolve(from(images));
                    }
                });
            }, (error) => {
                reject("Error while compressing images");
            });
        });
    }
    /**
     * @param {?} fileList
     * @param {?} option
     * @return {?}
     */
    static filesArrayToCompressedImageSourceEx(fileList, option) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let count = fileList.length;
            /** @type {?} */
            let observer = ImageUtilityService.filesArrayToSourceImages(fileList);
            /** @type {?} */
            let images = [];
            observer.subscribe((image) => {
                images.push(image);
                if (option == null) {
                    option = new ResizeOptions();
                }
                ImageCompressService.compressImage(image, option, (imageRef) => {
                    if (--count == 0) {
                        resolve(from(images));
                    }
                });
            }, (error) => {
                reject("Error while compressing images");
            });
        });
    }
    /**
     * @param {?} fileList
     * @return {?}
     */
    static filesArrayToCompressedImageSource(fileList) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let count = fileList.length;
            /** @type {?} */
            let observer = ImageUtilityService.filesArrayToSourceImages(fileList);
            /** @type {?} */
            let images = [];
            observer.subscribe((image) => {
                images.push(image);
                ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {
                    if (--count == 0) {
                        resolve(from(images));
                    }
                });
            }, (error) => {
                reject("Error while compressing images");
            });
        });
    }
    /**
     * @param {?} images
     * @return {?}
     */
    static IImageListToCompressedImageSource(images) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let count = images.length;
            images.forEach(image => {
                ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {
                    console.log(image);
                    if (--count == 0) {
                        resolve(images);
                    }
                });
            });
        });
    }
    /**
     * @param {?} images
     * @param {?} resizeOption
     * @return {?}
     */
    static IImageListToCompressedImageSourceEx(images, resizeOption) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let count = images.length;
            images.forEach(image => {
                if (resizeOption == null) {
                    resizeOption = new ResizeOptions();
                }
                ImageCompressService.compressImage(image, resizeOption, (imageRef) => {
                    console.log(image);
                    if (--count == 0) {
                        resolve(images);
                    }
                });
            });
        });
    }
}
ImageCompressService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ ImageCompressService.ngInjectableDef = defineInjectable({ factory: function ImageCompressService_Factory() { return new ImageCompressService(); }, token: ImageCompressService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImageCompressModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: ImageCompressModule,
            providers: [ImageCompressService, ImageUtilityService]
        };
    }
}
ImageCompressModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                providers: [ImageUtilityService, ImageCompressService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ImageCompressService, ImageCompressModule, ResizeOptions, ImageUtilityService, SourceImage };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,